# -*- coding: utf-8 -*-
"""Klastering K-Means dengan Dataku.txt.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i4tey-ceVHgpJK_OVaBAMZ7xu4RJGWXN
"""

import numpy as np
from matplotlib import pyplot as plt
from matplotlib.pyplot import cm
import time
import itertools

datasetPath = "dataray.txt"
dataset = np.loadtxt(datasetPath, delimiter=" ")

k = 2
iterationCounter = 0
input = dataset

def initCentroid(dataIn, k):
  result = dataIn[np.random.choice(dataIn.shape[0], k, replace=False)]
  return result

def plotClusterResult(listClusterMembers, centroid, iteration, converged):
    n = listClusterMembers.__len__()
    color = iter(cm.rainbow(np.linspace(0, 1, n)))
    plt.figure("figure")
    plt.clf()
    plt.title("iteration-" + iteration)
    marker = itertools.cycle(('.', '*', '^', 'x', '+'))
    for i in range(n):
      col = next(color)
      memberCluster = np.asmatrix(listClusterMembers[i])
      plt.scatter(np.ravel(memberCluster[:, 0]), np.ravel(memberCluster[:, 1]),
                  marker=marker.__next__(), s=100, c=col, label="klaster-"+str(i+1))
    for i in range(n):
      plt.scatter((centroid[i, 0]), (centroid[i, 1]), marker=marker.__next__(),
                  c=col, label="centroid-" + str(i + 1))

    if (converged == 0):
      plt.legend()
      plt.ion()
      plt.show()
      plt.pause(0.1)
    if (converged == 1):
      plt.legend()
      plt.show(block=True)

def kMeans (data, centroidInit):
  nCluster = k
  global iterationCounter
  centroidInit = np.matrix(centroidInit)

  while (True):
    iterationCounter += 1
    euclideanMatrixAllCluster = np.ndarray(shape=(data.shape[0], 0))

    for i in range (0, nCluster):
      centroidRepeated = np.repeat(centroidInit[i,:], data.shape[0], axis=0)
      deltaMatrix = abs(np.subtract(data, centroidRepeated))

      euclideanMatrix = np.sqrt(np.square(deltaMatrix).sum(axis=1))
      euclideanMatrixAllCluster = \
      np.concatenate((euclideanMatrixAllCluster, euclideanMatrix), axis=1)

    clusterMatrix = np.ravel(np.argmin(np.matrix(euclideanMatrixAllCluster), axis=1))
    listClusterMember = [[] for i in range(k)]
    for i in range(0, data.shape[0]):
      listClusterMember[np.asscalar(clusterMatrix[i])].append(data[i,:])
    
    newCentroid = np.ndarray(shape=(0, centroidInit.shape[1]))
    for i in range(0, nCluster):
      memberCluster = np.asmatrix(listClusterMember[i])
      centroidCluster = memberCluster.mean(axis=0)
      newCentroid = np.concatenate((newCentroid, centroidCluster), axis=0)
    print("iter: ",iterationCounter)
    print("centroid: ",newCentroid)

    if((centroidInit == newCentroid).all()):
      break

    centroidInit = newCentroid

    plotClusterResult(listClusterMember, centroidInit, str(iterationCounter), 0)
    time.sleep(1)
  return listClusterMember, centroidInit

centroidInit = initCentroid(input, k)
clusterResults, centroid = kMeans(input, centroidInit)
plotClusterResult(clusterResults, centroid, str(iterationCounter)+" (converged)", 1)